// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/invoice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InvoiceService_CreateInvoice_FullMethodName                = "/invoice.InvoiceService/CreateInvoice"
	InvoiceService_UpdateInvoice_FullMethodName                = "/invoice.InvoiceService/UpdateInvoice"
	InvoiceService_DeleteInvoice_FullMethodName                = "/invoice.InvoiceService/DeleteInvoice"
	InvoiceService_GetInvoiceByID_FullMethodName               = "/invoice.InvoiceService/GetInvoiceByID"
	InvoiceService_GetInvoiceByInvoiceNo_FullMethodName        = "/invoice.InvoiceService/GetInvoiceByInvoiceNo"
	InvoiceService_ListInvoices_FullMethodName                 = "/invoice.InvoiceService/ListInvoices"
	InvoiceService_UpdateInvoiceItem_FullMethodName            = "/invoice.InvoiceService/UpdateInvoiceItem"
	InvoiceService_DeleteInvoiceItem_FullMethodName            = "/invoice.InvoiceService/DeleteInvoiceItem"
	InvoiceService_GetInvoiceItemsByInvoiceID_FullMethodName   = "/invoice.InvoiceService/GetInvoiceItemsByInvoiceID"
	InvoiceService_UpdatePaymentInfoByInvoiceID_FullMethodName = "/invoice.InvoiceService/UpdatePaymentInfoByInvoiceID"
	InvoiceService_GetPaymentInfoByInvoiceID_FullMethodName    = "/invoice.InvoiceService/GetPaymentInfoByInvoiceID"
)

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type InvoiceServiceClient interface {
	// Create a new invoice
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	// Update an invoice
	UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*UpdateInvoiceResponse, error)
	// Delete an invoice
	DeleteInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteInvoiceResponse, error)
	// Get an invoice by ID
	GetInvoiceByID(ctx context.Context, in *GetInvoiceByIDRequest, opts ...grpc.CallOption) (*GetInvoiceByIDResponse, error)
	// Get an invoice by Invoice No
	GetInvoiceByInvoiceNo(ctx context.Context, in *GetInvoiceByInvoiceNoRequest, opts ...grpc.CallOption) (*GetInvoiceByInvoiceNoResponse, error)
	// List invoices
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	// Update invoice item(s)
	UpdateInvoiceItem(ctx context.Context, in *UpdateInvoiceItemRequest, opts ...grpc.CallOption) (*UpdateInvoiceItemResponse, error)
	// Delete an invoice item
	DeleteInvoiceItem(ctx context.Context, in *DeleteInvoiceItemRequest, opts ...grpc.CallOption) (*DeleteInvoiceItemResponse, error)
	// Get an invoice items by Invoice ID
	GetInvoiceItemsByInvoiceID(ctx context.Context, in *GetInvoiceItemsByInvoiceIDRequest, opts ...grpc.CallOption) (*GetInvoiceItemsByInvoiceIDResponse, error)
	// Update payment info
	UpdatePaymentInfoByInvoiceID(ctx context.Context, in *UpdatePaymentInfoByInvoiceIDRequest, opts ...grpc.CallOption) (*UpdatePaymentInfoByInvoiceIDResponse, error)
	// Get payment info by Invoice ID
	GetPaymentInfoByInvoiceID(ctx context.Context, in *GetPaymentInfoByInvoiceIDRequest, opts ...grpc.CallOption) (*GetPaymentInfoByInvoiceIDResponse, error)
}

type invoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceServiceClient(cc grpc.ClientConnInterface) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_CreateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*UpdateInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_UpdateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) DeleteInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_DeleteInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoiceByID(ctx context.Context, in *GetInvoiceByIDRequest, opts ...grpc.CallOption) (*GetInvoiceByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceByIDResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetInvoiceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoiceByInvoiceNo(ctx context.Context, in *GetInvoiceByInvoiceNoRequest, opts ...grpc.CallOption) (*GetInvoiceByInvoiceNoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceByInvoiceNoResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetInvoiceByInvoiceNo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, InvoiceService_ListInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) UpdateInvoiceItem(ctx context.Context, in *UpdateInvoiceItemRequest, opts ...grpc.CallOption) (*UpdateInvoiceItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInvoiceItemResponse)
	err := c.cc.Invoke(ctx, InvoiceService_UpdateInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) DeleteInvoiceItem(ctx context.Context, in *DeleteInvoiceItemRequest, opts ...grpc.CallOption) (*DeleteInvoiceItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInvoiceItemResponse)
	err := c.cc.Invoke(ctx, InvoiceService_DeleteInvoiceItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoiceItemsByInvoiceID(ctx context.Context, in *GetInvoiceItemsByInvoiceIDRequest, opts ...grpc.CallOption) (*GetInvoiceItemsByInvoiceIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceItemsByInvoiceIDResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetInvoiceItemsByInvoiceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) UpdatePaymentInfoByInvoiceID(ctx context.Context, in *UpdatePaymentInfoByInvoiceIDRequest, opts ...grpc.CallOption) (*UpdatePaymentInfoByInvoiceIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePaymentInfoByInvoiceIDResponse)
	err := c.cc.Invoke(ctx, InvoiceService_UpdatePaymentInfoByInvoiceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetPaymentInfoByInvoiceID(ctx context.Context, in *GetPaymentInfoByInvoiceIDRequest, opts ...grpc.CallOption) (*GetPaymentInfoByInvoiceIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentInfoByInvoiceIDResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetPaymentInfoByInvoiceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
// All implementations must embed UnimplementedInvoiceServiceServer
// for forward compatibility.
//
// Service definition
type InvoiceServiceServer interface {
	// Create a new invoice
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	// Update an invoice
	UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*UpdateInvoiceResponse, error)
	// Delete an invoice
	DeleteInvoice(context.Context, *DeleteInvoiceRequest) (*DeleteInvoiceResponse, error)
	// Get an invoice by ID
	GetInvoiceByID(context.Context, *GetInvoiceByIDRequest) (*GetInvoiceByIDResponse, error)
	// Get an invoice by Invoice No
	GetInvoiceByInvoiceNo(context.Context, *GetInvoiceByInvoiceNoRequest) (*GetInvoiceByInvoiceNoResponse, error)
	// List invoices
	ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	// Update invoice item(s)
	UpdateInvoiceItem(context.Context, *UpdateInvoiceItemRequest) (*UpdateInvoiceItemResponse, error)
	// Delete an invoice item
	DeleteInvoiceItem(context.Context, *DeleteInvoiceItemRequest) (*DeleteInvoiceItemResponse, error)
	// Get an invoice items by Invoice ID
	GetInvoiceItemsByInvoiceID(context.Context, *GetInvoiceItemsByInvoiceIDRequest) (*GetInvoiceItemsByInvoiceIDResponse, error)
	// Update payment info
	UpdatePaymentInfoByInvoiceID(context.Context, *UpdatePaymentInfoByInvoiceIDRequest) (*UpdatePaymentInfoByInvoiceIDResponse, error)
	// Get payment info by Invoice ID
	GetPaymentInfoByInvoiceID(context.Context, *GetPaymentInfoByInvoiceIDRequest) (*GetPaymentInfoByInvoiceIDResponse, error)
	mustEmbedUnimplementedInvoiceServiceServer()
}

// UnimplementedInvoiceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInvoiceServiceServer struct{}

func (UnimplementedInvoiceServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*UpdateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) DeleteInvoice(context.Context, *DeleteInvoiceRequest) (*DeleteInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvoiceByID(context.Context, *GetInvoiceByIDRequest) (*GetInvoiceByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceByID not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvoiceByInvoiceNo(context.Context, *GetInvoiceByInvoiceNoRequest) (*GetInvoiceByInvoiceNoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceByInvoiceNo not implemented")
}
func (UnimplementedInvoiceServiceServer) ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedInvoiceServiceServer) UpdateInvoiceItem(context.Context, *UpdateInvoiceItemRequest) (*UpdateInvoiceItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoiceItem not implemented")
}
func (UnimplementedInvoiceServiceServer) DeleteInvoiceItem(context.Context, *DeleteInvoiceItemRequest) (*DeleteInvoiceItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvoiceItem not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvoiceItemsByInvoiceID(context.Context, *GetInvoiceItemsByInvoiceIDRequest) (*GetInvoiceItemsByInvoiceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceItemsByInvoiceID not implemented")
}
func (UnimplementedInvoiceServiceServer) UpdatePaymentInfoByInvoiceID(context.Context, *UpdatePaymentInfoByInvoiceIDRequest) (*UpdatePaymentInfoByInvoiceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentInfoByInvoiceID not implemented")
}
func (UnimplementedInvoiceServiceServer) GetPaymentInfoByInvoiceID(context.Context, *GetPaymentInfoByInvoiceIDRequest) (*GetPaymentInfoByInvoiceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentInfoByInvoiceID not implemented")
}
func (UnimplementedInvoiceServiceServer) mustEmbedUnimplementedInvoiceServiceServer() {}
func (UnimplementedInvoiceServiceServer) testEmbeddedByValue()                        {}

// UnsafeInvoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceServiceServer will
// result in compilation errors.
type UnsafeInvoiceServiceServer interface {
	mustEmbedUnimplementedInvoiceServiceServer()
}

func RegisterInvoiceServiceServer(s grpc.ServiceRegistrar, srv InvoiceServiceServer) {
	// If the following call pancis, it indicates UnimplementedInvoiceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InvoiceService_ServiceDesc, srv)
}

func _InvoiceService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_UpdateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).UpdateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_UpdateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).UpdateInvoice(ctx, req.(*UpdateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_DeleteInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).DeleteInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_DeleteInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).DeleteInvoice(ctx, req.(*DeleteInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoiceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoiceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetInvoiceByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoiceByID(ctx, req.(*GetInvoiceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoiceByInvoiceNo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceByInvoiceNoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoiceByInvoiceNo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetInvoiceByInvoiceNo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoiceByInvoiceNo(ctx, req.(*GetInvoiceByInvoiceNoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_ListInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_UpdateInvoiceItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).UpdateInvoiceItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_UpdateInvoiceItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).UpdateInvoiceItem(ctx, req.(*UpdateInvoiceItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_DeleteInvoiceItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvoiceItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).DeleteInvoiceItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_DeleteInvoiceItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).DeleteInvoiceItem(ctx, req.(*DeleteInvoiceItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoiceItemsByInvoiceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceItemsByInvoiceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoiceItemsByInvoiceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetInvoiceItemsByInvoiceID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoiceItemsByInvoiceID(ctx, req.(*GetInvoiceItemsByInvoiceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_UpdatePaymentInfoByInvoiceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentInfoByInvoiceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).UpdatePaymentInfoByInvoiceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_UpdatePaymentInfoByInvoiceID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).UpdatePaymentInfoByInvoiceID(ctx, req.(*UpdatePaymentInfoByInvoiceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetPaymentInfoByInvoiceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentInfoByInvoiceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetPaymentInfoByInvoiceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetPaymentInfoByInvoiceID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetPaymentInfoByInvoiceID(ctx, req.(*GetPaymentInfoByInvoiceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceService_ServiceDesc is the grpc.ServiceDesc for InvoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invoice.InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _InvoiceService_CreateInvoice_Handler,
		},
		{
			MethodName: "UpdateInvoice",
			Handler:    _InvoiceService_UpdateInvoice_Handler,
		},
		{
			MethodName: "DeleteInvoice",
			Handler:    _InvoiceService_DeleteInvoice_Handler,
		},
		{
			MethodName: "GetInvoiceByID",
			Handler:    _InvoiceService_GetInvoiceByID_Handler,
		},
		{
			MethodName: "GetInvoiceByInvoiceNo",
			Handler:    _InvoiceService_GetInvoiceByInvoiceNo_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _InvoiceService_ListInvoices_Handler,
		},
		{
			MethodName: "UpdateInvoiceItem",
			Handler:    _InvoiceService_UpdateInvoiceItem_Handler,
		},
		{
			MethodName: "DeleteInvoiceItem",
			Handler:    _InvoiceService_DeleteInvoiceItem_Handler,
		},
		{
			MethodName: "GetInvoiceItemsByInvoiceID",
			Handler:    _InvoiceService_GetInvoiceItemsByInvoiceID_Handler,
		},
		{
			MethodName: "UpdatePaymentInfoByInvoiceID",
			Handler:    _InvoiceService_UpdatePaymentInfoByInvoiceID_Handler,
		},
		{
			MethodName: "GetPaymentInfoByInvoiceID",
			Handler:    _InvoiceService_GetPaymentInfoByInvoiceID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/invoice.proto",
}
